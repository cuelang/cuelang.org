// Copyright 2019 CUE Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// genspec regenerates the Hugo markdown language spec from the pinned source of
// truth in the cuelang.org/go module
package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"os/exec"
	"path/filepath"
	"strings"

	// imported for side effect of module being available in cache
	_ "cuelang.org/go/pkg"
)

func main() {
	var cueDir bytes.Buffer
	cmd := exec.Command("go", "list", "-m", "-f={{.Dir}}", "cuelang.org/go")
	cmd.Stdout = &cueDir
	if err := cmd.Run(); err != nil {
		log.Fatal(fmt.Errorf("failed to run %v: %w", strings.Join(cmd.Args, " "), err))
	}
	srcSpecPath := filepath.Join(strings.TrimSpace(cueDir.String()), "doc", "ref", "spec.md")
	srcSpec, err := ioutil.ReadFile(srcSpecPath)
	if err != nil {
		log.Fatal(fmt.Errorf("failed to read %v: %w", srcSpecPath, err))
	}
	var out bytes.Buffer
	fmt.Fprintln(&out, `<!-- Code generated by genspec. DO NOT EDIT. -->
+++
title = "Language Specification"
layout = "spec"
+++`)
	out.Write(srcSpec)
	dstPath := "spec.md"
	if err := ioutil.WriteFile(dstPath, out.Bytes(), 0666); err != nil {
		log.Fatal(fmt.Errorf("failed to write to %v: %w", dstPath, err))
	}
}
